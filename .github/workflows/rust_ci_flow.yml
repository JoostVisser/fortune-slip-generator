name: Rust CI

on: [push, pull_request]

env:
  CARGO_TERM_COLOR: always
  RUST_LOG: INFO

jobs:
  test:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    env:
      RELEASE_FLAG: ""
      BUILD_FOLDER: "target/debug"
      EXECUTABLE_NAME: "fortune_generator"
    strategy:
      matrix:
        os:
          - ubuntu-latest
          - windows-latest
      fail-fast: false
    steps:
      - uses: actions/checkout@v3
      - name: Set variables for release
        shell: bash
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          echo "RELEASE_FLAG=--release" >> $GITHUB_ENV
          echo "BUILD_FOLDER=target/release" >> $GITHUB_ENV
      - name: Set variables for windows
        shell: bash
        if: runner.os == 'Windows'
        run: echo "EXECUTABLE_NAME=fortune_generator.exe" >> $GITHUB_ENV
      - uses: dtolnay/rust-toolchain@stable
        with:
          components: llvm-tools-preview
      - uses: Swatinem/rust-cache@v2
      - uses: ./.github/actions/install_fonts
        with:
          fonts-folder: data/fonts
      - uses: ./.github/actions/install_inkscape
      - run: inkscape --help
      - name: Install LLVM Cov
        uses: taiki-e/install-action@cargo-llvm-cov
      - name: Run tests
        run: >
          cargo llvm-cov test
          --no-fail-fast
          --verbose
          --codecov
          --output-path codecov.json
          ${{ env.RELEASE_FLAG }}
      - name: Upload coverage to Codecov
        if: runner.os == 'Linux'
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: codecov.json
          fail_ci_if_error: true
      - name: Build executable (${{ env.BUILD_FOLDER }})
        run: cargo build --verbose ${{ env.RELEASE_FLAG }}
      - name: Upload executable
        uses: actions/upload-artifact@v2
        with:
          name: binary
          path: ${{ env.BUILD_FOLDER}}/${{ env.EXECUTABLE_NAME }}

  fmt:
    name: Style checker
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy
      - uses: Swatinem/rust-cache@v2
      - uses: actions/setup-node@v3
      - run: npm install -g jscpd
      - run: cargo fmt --all -- --check
      - run: cargo clippy --all -- -D warnings
      - run: npx jscpd src
      - run: cargo run --package script_utils --bin script_utils --quiet >> $GITHUB_ENV
      - name: Create the Badge
        uses: schneegans/dynamic-badges-action@v1.6.0
        with:
          auth: ${{ secrets.GIST_SECRET }}
          gistID: 4683758f6258e38bbe3169e5b315fdcc
          filename: jscpd-badge.json
          label: "Copy-Paste"
          minColorRange: 0
          maxColorRange: 20
          invertColorRange: true
          message: ${{ env.DUPL }}%
          valColorRange: ${{ env.DUPL }}

  upload_artifacts:
    name: Upload artifacts
    runs-on: ubuntu-latest
    needs: [fmt, test]
    steps:
      - uses: actions/checkout@v3
      - uses: actions/download-artifact@v2
        with:
          name: binary
      - run: mkdir -p release/linux release/windows
      - run: cp fortune_generator release/linux
      - run: cp fortune_generator.exe release/windows
      - run: echo release/linux release/windows | xargs -n 1 cp -r data/fortune_data/*
      - uses: actions/upload-artifact@v2
        with:
          name: build-linux
          path: release/linux
      - uses: actions/upload-artifact@v2
        with:
          name: build-windows
          path: release/windows

  release:
    name: Release
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    env:
      FOLDER_NAME: "fortune_generator-${{ github.ref_name }}"
      WINDOWS_ZIP: "fortune_generator-${{ github.ref_name }}.zip"
      LINUX_TAR: "fortune_generator-${{ github.ref_name }}.tar.gz"
    permissions:
      contents: write
    needs: [upload_artifacts]
    steps:
      - uses: actions/checkout@v3
      - run: mkdir -p release/linux/fortune_generator release/windows/fortune_generator
      - uses: actions/download-artifact@v2
        with:
          name: build-linux
          path: release/linux/fortune_generator
      - uses: actions/download-artifact@v2
        with:
          name: build-windows
          path: release/windows/fortune_generator
      - run: cp -r data/fonts release/linux/${{ env.FOLDER_NAME}}
      - run: cp -r data/fonts release/windows/${{ env.FOLDER_NAME}}
      - run: cp -r data/please_read_me.txt release/linux/${{ env.FOLDER_NAME}}
      - run: cp -r data/please_read_me.txt release/windows/${{ env.FOLDER_NAME}}
      - run: (cd release/linux; tar -cvf ../${{ env.LINUX_TAR }} ${{ env.FOLDER_NAME}} )
      - run: (cd release/windows; zip -r ../${{ env.WINDOWS_ZIP }} ${{ env.FOLDER_NAME}} )
      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            release/${{ env.LINUX_TAR }}
            release/${{ env.WINDOWS_ZIP }}
            data/figma_template/omikuji_template.fig
          tag_name: ${{ github.ref }}
          body_path: CHANGELOG.md
          name: ${{ github.ref_name }}
          draft: false
          prerelease: false
          fail_on_unmatched_files: true
